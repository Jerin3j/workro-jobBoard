datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  company             Company?
  JobSeeker           JobSeeker?
  razorpayCustomerId  String?          // @unique
  userType            userType?
  onBoardingCompleted Boolean          @default(false)
  Authenticator       Authenticator[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  SavedJobPost        SavedJobPost[]
  AppliedJobPost      AppliedJobPost[]
}

enum userType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  location        String
  about           String
  logo            String
  website         String
  LinkedinAccount String?
  JobPost         JobPost[]
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model JobSeeker {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bio       String
  resume    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model JobPost {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]
  status          JobPostStatus    @default(DRAFT)
  Company         Company          @relation(fields: [companyId], references: [id])
  companyId       String           @db.ObjectId()
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  appliedCount    Int              @default(0)
  SavedJobPost    SavedJobPost[]
  AppliedJobPost  AppliedJobPost[]
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  JobPost   JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId String   @unique @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId])
}

model AppliedJobPost {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  JobPost    JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId  String   @db.ObjectId
  User       User    @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, jobPostId])
}

